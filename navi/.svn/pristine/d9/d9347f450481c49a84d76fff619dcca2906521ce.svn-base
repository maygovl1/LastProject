<%@ page contentType="text/html; charset=utf-8" pageEncoding="utf-8"%> <!-- JSP 페이지 지시자 - 콘텐츠 유형 및 페이지 인코딩 설정 -->
<%@ page import='java.util.Random' %> <!-- JSP 페이지 지시자 - java.util.Random 클래스 import -->
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %> <!-- JSTL Core 태그 라이브러리 import -->
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn" %> <!-- JSTL Functions 태그 라이브러리 import -->
<%@ taglib prefix="spring" uri="http://www.springframework.org/tags"%> <!-- Spring 태그 라이브러리 import -->
<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %> <!-- Spring Form 태그 라이브러리 import -->
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %> <!-- JSTL Core 태그 라이브러리 import -->

<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"> <!-- 문서 콘텐츠 유형 및 문자 인코딩 설정 -->
<title>Web Messenger main</title><!-- 타이틀 설정 -->
<link type="text/css" rel="stylesheet" href="<c:url value='/css/table.css'/>"/> <!-- CSS 파일 링크 -->
<script  src="http://code.jquery.com/jquery-latest.min.js"></script> <!-- jQuery 라이브러리 링크 -->

<script>
	//chat 팝업창을 여러개 띄우기 위함
	var webSocket = null; // WebSocket 객체 초기화
	$(document).ready(function() {
		var url = 'ws://' + window.location.host + '${pageContext.request.contextPath}/usersServerEndpoint'; // WebSocket 연결 URL 생성
		webSocket = connection(url); // WebSocket 연결 생성 함수 호출
		var connectionType;

		webSocket.onopen = function(){ processOpen(); }; // WebSocket 연결이 열릴 때 호출될 함수 지정
		webSocket.onmessage = function(message) { processMessage(message); }; // WebSocket으로 메시지를 수신했을 때 호출될 함수 지정
		webSocket.onerror = function(message) { processError(message); }; // WebSocket 오류 발생 시 호출될 함수 지정

	});
	//var webSocket = new WebSocket('ws://' + window.location.host + '/egov-messenger/usersServerEndpoint');


	function connection(url) {
		var webSocket = null;
		if ('WebSocket' in window) { // 현재 브라우저가 WebSocket을 지원하는지 확인
			webSocket = new WebSocket(url); // WebSocket 객체 생성
		} else if ('MozWebSocket' in window) { // 모질라 브라우저에서 WebSocket을 지원하는지 확인
			webSocket = new MozWebSocket(url); // MozWebSocket 객체 생성
		} else {
			Console.log('Error: WebSocket is not supported by this browser.'); // WebSocket을 지원하지 않는 경우 에러 메시지 출력
            return null;
		}
		return webSocket; // 생성된 WebSocket 객체 반환
	}

	function processOpen() {
		connectionType = "firstConnection"; // 연결 타입 설정
		username = "${loginVO.name}"; // 사용자 이름 설정
		webSocket.send(JSON.stringify({ "connectionType" : connectionType, "username" : username })); // 서버에 연결 타입과 사용자 이름 전송
	}

	//server에서 메시지가 넘어왔을때
	function processMessage(message) {
		var jsonData = JSON.parse(message.data); // 받은 메시지를 JSON 형태로 파싱

		if (jsonData.allUsers != null) {
			//다른 사용자 접속 시,
			displayUsers(jsonData.allUsers); // 모든 사용자 목록 표시 함수 호출
		}

		if (jsonData.disconnectedUser != null) {
			//다른 사용자가 접속을 끊을 때,
			$("#"+jsonData.disconnectedUser).remove(); // 해당 사용자가 접속을 끊었을 때 HTML 요소 삭제
		}

		//다른 사용자와 대화하고자 시도할 때, 채팅창을 팝업
		if (jsonData.enterChatId != null) {
			var roomId = jsonData.enterChatId;
			$("#roomId").val(roomId); // 대화방 ID 설정
			$("#username").val(jsonData.username); // 사용자 이름 설정
			openPopup(roomId); // 팝업 열기 함수 호출
		}
	}

	function openPopup(roomId) {
		var popOptions = "width= 500, height= 700, resizable=yes, status= no, scrollbar= yes"; // 팝업 창 설정
		var targetTitle = random(roomId); // 두명의 사용자가 다른 팝업으로 뜨기 위해서 targetTitle을 랜덤으로 만들어준다.
		popupPost("<c:url value='/chat/websocketMessengePopup.do'/>", targetTitle, popOptions); // 팝업 창 생성 함수 호출
	}

	function popupPost(url, target, option) {
		window.open("", target, option); // 팝업 창 열기

		var form = $("form[name=usersForm]"); // 폼 요소 선택
		form.attr("target", target); // 폼의 타겟 설정
		form.attr("action", url); // 폼의 액션 설정
		form.attr("method", "get"); // 폼의 메소드 설정
		form.submit(); // 폼 전송
	}

	function displayUsers(userList) {
		var username;
		$("#users tr:not(:first)").remove(); // 사용자 목록 초기화
		for (var i=0; i<userList.length; i++) {
			if("${loginVO.name}"==userList[i]) {
				username = userList[i]+"(me!)"; // 본인인 경우 "me!" 추가
			} else{
				username = userList[i];
			}
			$.newTr = $("<tr id="+userList[i]+" onclick='trClick(this)'><td>"+username+"</td></tr>"); // 새로운 테이블 행 생성
			//append
			$("#users").last().append($.newTr); //