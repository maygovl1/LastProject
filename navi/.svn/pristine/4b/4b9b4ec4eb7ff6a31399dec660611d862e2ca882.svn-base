package kr.or.navi.todaylist.controller;

import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import kr.or.navi.common.paging.BootstrapFormBasePaginationRenderer;
import kr.or.navi.common.paging.PaginationInfo;
import kr.or.navi.common.paging.PaginationRenderer;
import kr.or.navi.todaylist.service.TodayListService;
import kr.or.navi.vo.TaskVO;
import kr.or.navi.vo.TodayListVO;
import lombok.extern.slf4j.Slf4j;


@Slf4j
@RequestMapping("/todaylist")
@Controller
public class TodaylistController {

	@Inject
	TodayListService todaylistService;
	
	@GetMapping
	public String todaylist(
			@RequestParam(name="page", required = false, defaultValue = "1") int currentPage
			,@RequestParam Map<String, Object> detailCondition
			,Model model) {
		
				
				PaginationInfo paging = new PaginationInfo(10,10); // 스크린 사이즈와, 블럭 사이즈
				
				paging.setCurrentPage(currentPage); 
				paging.setDetailCondition(detailCondition);
				
				List<TodayListVO> todayTaskList =todaylistService.taskList(paging);
				log.info("todayTaskList: {} ",todayTaskList);
				model.addAttribute("todayTaskList",todayTaskList); 
				//4.페이지네이션 그려주기
				PaginationRenderer renderer = new BootstrapFormBasePaginationRenderer("#searchForm");
				//5.페이지네이션 html String값으로 넘겨주기
				String pagingHTML = renderer.renderPagination(paging);
				//6.모델에 담아서 뷰로 보내기
				model.addAttribute("pagingHTML",pagingHTML);
				model.addAttribute("paging",paging);
				log.info("pagingHTML: {} ",pagingHTML);
				log.info("paging: {} ",paging);
		
		
		return "todaylist/todaylistList";
	}
}
