package kr.or.navi.board.share.controller;

import java.util.List;

import javax.inject.Inject;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.stereotype.Service;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import kr.or.navi.board.share.service.ShareService;
import kr.or.navi.common.paging.PaginationInfo;
import kr.or.navi.common.paging.SearchCondition;
import kr.or.navi.security.RealUser;
import kr.or.navi.vo.BoardPostVO;
import kr.or.navi.vo.EmpVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/board/share")
public class shareController {
	
	@Inject
	private ShareService service;
	
	@GetMapping
	public String sharePage(
			@RequestParam(name="page", required = false, defaultValue = "1") int currentPage
			,Model model
			, @ModelAttribute("simpleCondition") SearchCondition simpleCondition
	) {
		PaginationInfo paging = new PaginationInfo(3,3);
		paging.setCurrentPage(currentPage);
		List<BoardPostVO> shareList = service.retrieveShareList(paging);
		model.addAttribute("shareList",shareList);
		return "board/share";
	}
	
	@GetMapping("register")
	public String shareRegisterPage() {
		return "board/share_register";
	}

	@GetMapping("{bpId}")
	public String shareDetailPage(@PathVariable String bpId, Model model) {
		BoardPostVO share = service.retrieveShare(bpId);
		model.addAttribute("share", share);
		return "board/share_detail";
	}

	
	@GetMapping("/mod/{bpId}")
	public String formModPage(@PathVariable("bpId") String bpId, Model model) {
		BoardPostVO updateForm = service.retrieveShare(bpId);
		model.addAttribute("share", updateForm);
		return "board/share_mod";
	}
	
	@PutMapping("mod/{bpId}")
	public String sharePutController(@RequestBody BoardPostVO updateShare, @PathVariable String bpId, Model model, @RealUser EmpVO realUser) {
		log.info("updateShare : {}",updateShare);
		
		if(StringUtils.isNotBlank(updateShare.getBpCn()) && StringUtils.isNotBlank(updateShare.getBpTitle())) {
			updateShare.setBpId(bpId);
			updateShare.setEmpId(realUser.getEmpId());
			int cnt = service.modifyShare(updateShare);
			if(cnt>0) {
				model.addAttribute("msg","ok");
			}else {
				model.addAttribute("msg", "fail");
			}
		}else {
			model.addAttribute("msg", "empty");
		}
		return "jsonView";
	}
	
	@DeleteMapping("del/{bpId}")
	public String shraeDelController(@PathVariable String bpId, Model model) {
		log.info("bpId:{}",bpId);
		int cnt = service.removeShare(bpId);
		if(cnt>0) {
			model.addAttribute("msg", "ok");
		}else {
			model.addAttribute("msg", "fail");
		}
		return "jsonView";
	}
	
}


