package kr.or.navi.admin.emp.controller;

import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import kr.or.navi.admin.emp.service.AdminEmpService;
import kr.or.navi.common.paging.BootstrapFormBasePaginationRenderer;
import kr.or.navi.common.paging.PaginationInfo;
import kr.or.navi.common.paging.PaginationRenderer;
import kr.or.navi.vo.EmpVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/admin")
public class AdminEmpController {
	@Inject
	private AdminEmpService service;
	
	
	@GetMapping("emp")
	public String empPage(
			@RequestParam Map<String, Object> detailCondition
			, @RequestParam(name="page", required = false, defaultValue = "1") int currentPage
			,@RequestParam(name="pms", required = false, defaultValue = "") String pms
			,Model model) {
		if(pms.equals("")) {
			//파라미터가 없고 pms 사원 조회를 안함
			detailCondition.put("pms", "");
		}else {
			//파라미터가 있고 pms 사원조회를 함
			detailCondition.put("pms", "pms");
		}
		log.info("detailCondition : {}",detailCondition);
		PaginationInfo paging = new PaginationInfo(5,5);
		paging.setCurrentPage(currentPage);
		paging.setDetailCondition(detailCondition);
		List<EmpVO> empList = service.retrieveEmpList(paging);
		model.addAttribute("empList", empList);
		PaginationRenderer renderer = new BootstrapFormBasePaginationRenderer("#searchForm");
		String pagingHTML = renderer.renderPagination(paging);
		model.addAttribute("pagingHTML",pagingHTML);
		log.info("pagingHTML : {}",pagingHTML);
		model.addAttribute("paging",paging);
		return "admin/emp/adminEmpList";
	}

	@GetMapping("emp/invite")
	public String empInvitePage(Model model) {
		return "admin/emp/adminEmpInvite";
	}
	
	@GetMapping("emp/empo")
	public String empEmpowermentPage(
			@RequestParam Map<String, Object> detailCondition
			, @RequestParam(name="page", required = false, defaultValue = "1") int currentPage
			,@RequestParam(name="pms", required = false, defaultValue = "emp") String pms
			,Model model) {
		detailCondition.put("pms", "pms");
		log.info("detailCondition : {}",detailCondition);
		PaginationInfo paging = new PaginationInfo(5,5);
		paging.setCurrentPage(currentPage);
		paging.setDetailCondition(detailCondition);
		List<EmpVO> empList = service.retrieveEmpList(paging);
		model.addAttribute("empList", empList);
		PaginationRenderer renderer = new BootstrapFormBasePaginationRenderer("#searchForm");
		String pagingHTML = renderer.renderPagination(paging);
		model.addAttribute("pagingHTML",pagingHTML);
		log.info("pagingHTML : {}",pagingHTML);
		model.addAttribute("paging",paging);
		return "admin/emp/adminEmpEmpowerment";
	}
	@PostMapping("emp/empo")
	public String empEmpowermentController(@RequestParam("empId") String empId,@RequestParam("roleId") String roleId, Model model) {
		log.info("empId : {}",empId);
		log.info("roleId : {}",roleId);
		int cnt = service.modifyEmpRole(empId, roleId);
		if(cnt>0) {
			model.addAttribute("msg", "ok");
		}else {
			model.addAttribute("msg", "fail");
		}
		return "jsonView";
	}
	
	@GetMapping("emp/block")
	public String empBlockingPage(Model model) {
		return "admin/emp/adminEmpBlocking";
	}
	
	@GetMapping("emp/restore")
	public String empRestorationPage(Model model) {
		return "admin/emp/adminEmpRestoration";
	}

}
