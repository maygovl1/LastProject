function getCsrfToken(){
	return document.querySelector('meta[name="_csrf"]').getAttribute('content');
	}
function getCsrfHeader(){
	return document.querySelector('meta[name="_csrf_header"]').getAttribute('content');
}

$("a[data-pg-role='pageLink']").on("click", function(event) {
    event.preventDefault();
    let page = $(this).data("pgPage");
    let targetFormSelector = $(this).data("pgTarget");
    let $targetForm = $(targetFormSelector);
    $targetForm.find('input[name="page"]').val(page);
    $targetForm.submit();
    return false;
});


//tableClass에 '클래스명이나 아이디값으로 호출하여 사용'
function checkbox(tableClass) {
    let checkAll = $("#checkAll");
    let checkboxes = $(tableClass).find("input[type='checkbox']");
    let checked = checkboxes.prop("checked");
    checkAll.attr("title", "");
    checkboxes.attr("title", "");
    
    console.log(checkAll);
    
    checkAll.on("click", function() {
        let checked = $(this).prop("checked");
        $(this).attr("title", checked ? "체크" : "체크해제");
        
        checkboxes.each(function() {
            $(this).prop("checked", checked);
            $(this).attr("title", checked ? "체크" : "체크해제");
        });
    });

    checkboxes.each(function() {
        $(this).on("click", function() {
            let checked = $(this).prop("checked");
            $(this).attr("title", checked ? "체크" : "체크해제");
        });
    });

    return checkboxes;
}

//체크박스 스크립트
function addCheckInput(data, checkboxForm){
	console.log("data", data);
	data.each(function(index) {
		// index가 0이면 처리를 건너뛰기
	/*	if (index === 0) return;*/

		// 조회된 체크박스가 체크될 때마다 동적으로 submit할 input 박스 추가
		$(this).on("change", function() {
			// 체크박스의 상태가 변경될 때마다 실행되는 코드
			let isChecked = $(this).prop("checked");
			let value = $(this).attr("name");

			if (index === 0) { //checkAll 클릭 시
				// checkAll 했을 경우 전체 인풋 찾아서 checkboxForm에 넣기
				$(".checkbox:not(:first)").prop("checked", isChecked);
				$(".checkbox:not(:first)").each(function() {
					let checkboxValue = $(this).attr("name");
					if (isChecked) {
						// 체크된 경우에는 해당 체크박스의 입력란을 추가합니다.
						checkboxForm.innerHTML += `<input type="text" name="${checkboxValue}" value="${checkboxValue}">`;
					} else {
						// 체크가 해제된 경우 해당 체크박스의 입력란을 삭제합니다.
						$(`input[type='text'][name='${checkboxValue}']`).remove();
					}
				});
			} 
			
			if(index != 0){
					// 나머지 체크박스의 경우 개별적으로 처리합니다.
				if (isChecked) {
					// 체크된 경우에는 해당 체크박스의 입력란을 추가합니다.
					checkboxForm.innerHTML += `<input type="text" name="${value}" value="${value}">`;
				} else {
					// 체크가 해제된 경우 해당 체크박스의 입력란을 삭제합니다.
					$(`input[type='text'][name='${value}']`).remove();
				}
				
			}
			
		});
	});
}



//체크박스 함수실행
let test = checkbox('.tdList-Modal_table');
let checkboxForm = document.querySelector('#checkboxForm');
let checkboxForm2 = document.querySelector('#checkboxForm2');
let cPath = document.body.dataset.contextPath;

addCheckInput(test, checkboxForm);


$(":input[data-pg-init-value]").each(function(index, input) {
    let $input = $(input);
    let initValue = $input.data("pgInitValue");
    $input.val(initValue);
});



//검색클릭 시 비동기 요청 부분 
$("[data-pg-role='searchUI']").on('click', '[data-pg-role="searchBtn"]', function() {
	
	let $searchUI = $(this).parents("[data-pg-role='searchUI']");
	let targetFormSelector = $searchUI.data("pgTarget");
	let $targetForm = $(targetFormSelector);
	let formData = new FormData();
	$searchUI.find(":input[name]").each(function(index, input) {
		let name = input.name;
		let value = $(input).val();
		$targetForm.find(`input[name=${name}]`).val(value);
		formData.append(name, value);  //formData에 form의 데이터를 Map형식으로 넣어주기
	});
	
	
	let sendData = [];

	for (let [key, value] of formData) {
	    console.log(key + " : " + value);
	    let data = {};
	    data[key] = value;
	    sendData.push(data);
	}

	let queryString = new URLSearchParams(formData); // 파라미터를 쿼리스트링으로 변환
    let url =`${cPath}/todaylist/todayModal`;
    let method = $targetForm.attr("method");

    console.log(url);
    console.log(method);
	
	
	//비동기처리해야함 
	
    fetch(url, {
       method: method,
		headers:{
				//"Accept":"application/json", //클라이언트가 서버로 보내는 요청 타입 
				"Content-Type":"application/json", // 서버가 클라이언트에게 보내는 요청 타입
				[getCsrfHeader()]: getCsrfToken()
			},
			body: JSON.stringify({//js객체를 json 문자열로 변환하는 함수
			        ts: sendData[0]["ts"],
			        tps: sendData[1]["tps"],
			        word: sendData[2]["word"]
			  })
		
    }).then(resp => {
        if (resp.ok) {
            console.log("성공", resp);
           	return resp.json();
        } else {
            throw new Error(`상태코드 ${resp.status} 수신`, {cause: resp});
        }
    }).then(JsonObj => {
		//비동기로 서버에서 넘어온 데이터 넣을 곳
		let asynBody = document.querySelector('#asynBody');
		//let checkboxForm = document.querySelector('#checkboxForm');        


		console.log("JsonObj",JsonObj);
		//자바에서 json으로 반환된 배열객체의 개수
		objLength = Object.keys(JsonObj).length
		console.log("반환데이터 개수",objLength)
		//체크박스 폼 비워주기
		checkboxForm.innerHTML='';
		//테이블 한번 비워 주기
		asynBody.innerHTML='';
		
		if(objLength==0){
			asynBody.innerHTML = `
				<tr>
	             	<td colspan="9">해당조건의 일감이 없습니다.</td>
				</tr>
			`
		
		}
		
		
		for (let i = 0; i < objLength;i++){
			
			console.log(JsonObj[i])
			let tsNameCon =""
			if(JsonObj[i].tsId == 'T00001'){
				tsNameCon = `<span class="category new">${JsonObj[i].taskStatus.tsName}</span>`
			}
			
			if(JsonObj[i].tsId == 'T00002'){
				tsNameCon = `<span class="category emergency">${JsonObj[i].taskStatus.tsName}</span>`
			}
			
			if(JsonObj[i].tsId == 'T00003'){
				tsNameCon = `<span class="category ordinary">${JsonObj[i].taskStatus.tsName}</span>`
			}
		
			asynBody.innerHTML += `
				<tr>
					<th><input type="checkbox" class="checkbox" title="" name ="${JsonObj[i].taskId}" id="${JsonObj[i].taskId}"></th>
					<td>${JsonObj[i].rnum}</td>
					<td>${JsonObj[i].taskId}</td>
					<td>
						${tsNameCon}
					</td>
					<td class="text-start">
						 <a href="${cPath}/project/task/${JsonObj[i].proId}/${JsonObj[i].taskId}" title="[${JsonObj[i].proId}]${JsonObj[i].taskTitle} 상세페이지로 이동">
							  <em class="text-elipsis">
				                 <span class="fw-bold">[${JsonObj[i].proId}]</span>						       
								${JsonObj[i].taskTitle}
							</em>
						  </a>
					</td>
					<td>${JsonObj[i].empName}</td>
					<td>${JsonObj[i].taskProcessStatus.tpsName}</td>
					<td>${JsonObj[i].taskProcessStatus.tpsIng}</td>
					<td>${JsonObj[i].taskRegDtStr}</td>
				</tr>
			`;
		}
		//for end
		//비동기 실행 후 한번 더 실행 해줘야 스크립트 동작
		/*checkbox('.tdList-Modal_table');*/
		test = checkbox('.tdList-Modal_table');
		addCheckInput(test, checkboxForm);
		
	
    }).catch(err => {
        console.error(err);
    });
    

});



// 데이터를 로컬 스토리지에 저장하는 함수
function saveDataToLocalstorage(data) {
    localStorage.setItem('todolistData', JSON.stringify(data));
}

// 로컬 스토리지에서 데이터를 불러오는 함수
function getDataFromLocalstorage() {
    return JSON.parse(localStorage.getItem('todolistData')) || [];
}

// 페이지 로드 시 실행되는 함수
window.onload = function() {
    // 로컬 스토리지에서 데이터 불러오기
    let storedData = getDataFromLocalstorage();

    // 불러온 데이터를 사용하여 화면 구성하기
    renderData(storedData);
};

// 데이터를 받아온 후 화면을 구성하는 함수
function renderData(data) {
    let todaylistCon = document.querySelector("#todaylistTable tbody");
    todaylistCon.innerHTML = ''; // 기존 데이터 초기화
	
    if (data.length === 0) {
        todaylistCon.innerHTML = `
            <tr>
                <td colspan="9">오늘의 일정을 등록해주세요.</td>
            </tr>
        `;
        return; // 데이터가 없는 경우 함수 종료
    }
	
    // 데이터를 사용하여 화면 구성
    data.forEach(function(item, index) {
        let tsNameCon = '';
        if (item.tsId === 'T00001') {
            tsNameCon = `<span class="category new">${item.taskStatus.tsName}</span>`;
        } else if (item.tsId === 'T00002') {
            tsNameCon = `<span class="category emergency">${item.taskStatus.tsName}</span>`;
        } else if (item.tsId === 'T00003') {
            tsNameCon = `<span class="category ordinary">${item.taskStatus.tsName}</span>`;
        }

        todaylistCon.innerHTML += `
            <tr>
                <th><input type="checkbox" class="checkbox" title="" name ="${item.taskId}" id="${item.taskId}"></th>
                <td>${index + 1}</td>
                <td>${item.taskId}</td>
                <td>${tsNameCon}</td>
                <td class="text-start">
                    <a href="${cPath}/project/task/${item.proId}/${item.taskId}" title="[${item.proId}]${item.taskTitle} 상세페이지로 이동">
                        <em class="text-elipsis">
                            <span class="fw-bold">[${item.proId}]</span>
                            ${item.taskTitle}
                        </em>
                    </a>
                </td>
                <td>${item.taskCompDtStr}</td>
                <td><input type="text" class="form-control min-auto" placeholder="예상시간" name="taskEstTime" value="${item.taskEstTime ? item.taskEstTime : '' }"></td>
                <td><input type="text" class="form-control min-auto" placeholder="소요시간" name="taskRqDt" value="${item.taskRqDt ? item.taskRqDt : ''}"></td>
                <td>${item.taskProcessStatus.tpsIng}</td>
            </tr>
        `;
    });
}






//추가버튼 클릭시 체크된 데이터를 post 오늘의 일정 insert 데이터 컨트롤러로 보내기
//checkboxForm에서 만들어진 일감의 아이디값을 '추가버튼 클릭시 비동기  요청 보내기 ?'
let addTdBtn = $("#addTaskBtn");
addTdBtn.on("click",function(){
	$("#todoListModal").modal("hide");
	let checkedInput = $(checkboxForm).find("input[type='text']");
	let sendData2 = [];
	checkedInput.each(function() {
	    let name = "taskId";
	    let value = $(this).val();
	    sendData2.push({ [name]: value }); // 필요한 경우 sendData에 데이터를 추가할 수 있습니다.
	});

	
	if (checkedInput.length > 0) {
    // 비동기로
	    fetch(`${cPath}/todaylist`, {
	        method: $(checkboxForm).attr("method"),
	        headers: {
	            "Accept": "application/json", // 클라이언트가 서버로 보내는 요청 타입 
	            "Content-Type": "application/json", // 서버가 클라이언트에게 보내는 요청 타입
	            [getCsrfHeader()]: getCsrfToken()
	        },
	        body: JSON.stringify({sendData2})
			
	    }).then(resp=>{
			
			if (resp.ok) {
	            //console.log("성공", resp);
	           	return resp.json();
	        } else {
	            throw new Error(`상태코드 ${resp.status} 수신`, {cause: resp});
	        }
		}).then(JsonObj=>{ 
			//비동기데이터 시작
				//비동기로 서버에서 넘어온 데이터 넣을 곳
		let todaylistTable = document.querySelector('#todaylistTable');    
	/*	let todaylistCon= document.querySelector("#todaylistTable tbody");*/
		
		// 받아온 데이터를 로컬 스토리지에 저장
        saveDataToLocalstorage(JsonObj);

        // 받아온 데이터를 사용하여 화면 구성
        renderData(JsonObj);	
		
		//비동기 실행 후 한번 더 실행 해줘야 스크립트 동작
		/*checkbox('.tdList-Modal_table');*/
		test = checkbox('#todaylistTable');
		addCheckInput(test, checkboxForm2);
		
			//비동기데이터 끝	
		}).catch(err => {
        	console.error(err);
    	});
	}
	//if end
	
});





