package kr.or.navi.chat.server;

import java.io.IOException;
import java.io.StringReader;
import java.util.HashMap;
import java.util.Map;

import javax.inject.Inject;
import javax.json.Json;
import javax.json.JsonObject;
import javax.websocket.EncodeException;
import javax.websocket.OnMessage;
import javax.websocket.Session;
import javax.websocket.server.ServerEndpoint;

import kr.or.navi.chat.server.config.ServerAppConfig;
import kr.or.navi.chat.web.dao.ChatDAO;
import kr.or.navi.mapper.dao.EmpDAO;
import kr.or.navi.vo.ChatRoomVO;
import kr.or.navi.vo.EmpVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
// WebSocket 서버 엔드포인트를 정의하는 어노테이션입니다.
@ServerEndpoint(value = "/usersServerEndpoint", configurator = ServerAppConfig.class)
public class UsersServerEndPoint {
    @Inject
    private ChatDAO chatDAO; // 채팅 DAO 객체를 주입받습니다.
    
    @Inject
    private EmpDAO empDAO; // 사원 DAO 객체를 주입받습니다.

    private Map<String, ChatRoomVO> chatRooms = new HashMap<>(); // 채팅방 정보를 담는 맵입니다.

    // 클라이언트로부터 메시지를 받는 메서드입니다.
    @OnMessage
    public void handleMessage(String message, Session userSession) throws IOException, EncodeException {
        // JSON 형식의 메시지를 파싱합니다.
        JsonObject jsonObject = Json.createReader(new StringReader(message)).readObject();
        log.info("jsonObjectttt {}", jsonObject);
        // 메시지에서 연결 타입을 가져옵니다.
        String connectionType = jsonObject.getString("connectionType");

        // 만약 연결 타입이 채팅 연결이라면,
        if ("chatConnection".equals(connectionType)) {
            // 연결하는 사용자 이름을 가져옵니다.
            String connectingUser = jsonObject.getString("connectingUser");
        	log.info("connectingUserrrrr {}", connectingUser);
        	log.info("userSessionnnnn {}", userSession);
            // 해당 사용자의 채팅방 ID를 가져오거나 새로 생성합니다.
            String roomId = getOrCreateChatRoom(connectingUser, userSession);
            // 클라이언트에게 채팅방 정보를 전송합니다.
            sendRoomInfoToClient(roomId, userSession);
        }
    }

    // 사용자의 채팅방을 가져오거나 새로 생성하는 메서드입니다.
    private String getOrCreateChatRoom(String connectingUser, Session userSession) {
        // 이미 해당 사용자의 채팅방이 존재하는지 확인합니다.
        String roomId = chatDAO.checkRoom(connectingUser);
        if (roomId != null) {
            // 채팅방이 이미 존재하면 해당 roomId를 반환합니다.
            return roomId;
        } else {
            // 해당 사용자의 정보를 데이터베이스에서 조회합니다.
            EmpVO empInfo = empDAO.selectOne(connectingUser);
            // 사용자 정보가 없는 경우 새로운 채팅방을 생성할 수 없습니다.
            if (empInfo == null) {
                log.error("사용자 정보를 찾을 수 없습니다아앙: {}", connectingUser);
                return null;
            }


            // 새로운 채팅방 VO 객체를 생성하고 이름을 설정합니다.
            ChatRoomVO roomVO = new ChatRoomVO();
            // 새로운 채팅방의 이름을 구성합니다.
            String roomName = empInfo.getEmpName() + " " + empInfo.getPsName() + " (" + empInfo.getDeptName() + ")";
            roomVO.setRoomName(roomName);
            // 데이터베이스에 새로운 채팅방을 생성하고 ID를 받아옵니다.
            roomId = chatDAO.createPrivateRoom(roomVO);
            
            // 채팅방에 사용자들을 추가합니다.
            chatDAO.addChatUser(roomId, connectingUser);
            chatDAO.addChatUser(roomId, userSession.getId());

            return roomId;
        }
    }

    // 클라이언트에게 채팅방 정보를 전송하는 메서드입니다.
    private void sendRoomInfoToClient(String roomId, Session userSession) throws IOException {
        // JSON 형식으로 채팅방 정보를 구성합니다.
        JsonObject roomInfo = Json.createObjectBuilder()
                .add("roomId", roomId)
                .build();
        // 클라이언트에게 채팅방 정보를 전송합니다.
        userSession.getBasicRemote().sendText(roomInfo.toString());
    }
}