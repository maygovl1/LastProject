package kr.or.navi.vo;

import java.io.Serializable;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

import javax.validation.constraints.NotBlank;
import javax.validation.groups.Default;

import org.apache.commons.lang3.StringUtils;
import org.springframework.web.multipart.MultipartFile;

import kr.or.navi.validate.AnoInsertGroup;
import kr.or.navi.validate.FormInsertGroup;
import kr.or.navi.validate.PhotoInsertGroup;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.extern.slf4j.Slf4j;

@Data
@Slf4j
@EqualsAndHashCode(of="bpId")
public class BoardPostVO implements Serializable{
	private int rnum;
	private String bpId;
	private String empId;
	private String bpModId;
	private String brdId;
	@NotBlank(groups = {PhotoInsertGroup.class, AnoInsertGroup.class,FormInsertGroup.class,Default.class})
	private String bpTitle;
	@ToString.Exclude
	@NotBlank(groups = {PhotoInsertGroup.class, AnoInsertGroup.class,FormInsertGroup.class,Default.class})
	private String bpCn;
	private LocalDateTime bpRegDt;
	private LocalDateTime bpModDt;
	private LocalDateTime bpDelDt;
	private String bpOpYn;
	private Integer bpCnt = 0;
	private String bpShrId;
	private String bpShrYn;
	@NotBlank(groups = {AnoInsertGroup.class})
	private String bpNtcId;
	private String empName;
	private String bpNtcName;
	private String cmAtt1;
	private String cmName;
	private String shrName;
	private String bpQnaAs;
	private String bpQnaYn;
	private String qnaName;
	private EmpVO emp;
	private List<BoardPostFileVO> bpFileVoList;
	private MultipartFile[] bpAttchFile;
	private Long fileSize;
	private String modName;
	public int getBpCnt() {
		 return this.bpCnt;
	}
	
	public String getBpNtcId() {
		if(StringUtils.isNotBlank(bpNtcId)) {
			return bpNtcId.trim();
		}
		return bpNtcId;
	}
	
	public List<BoardPostFileVO> getBpFileVoList(){
		bpFileVoList = new ArrayList<BoardPostFileVO>();
		if(bpAttchFile != null) {
			log.info("bpAttchFile : {}",bpAttchFile.length);
			for (MultipartFile file : bpAttchFile) {
				log.info("file : {}",file);
				long size = file.getSize();
				if(size>0) {
					BoardPostFileVO bpfv = new BoardPostFileVO();
					bpfv.setBpAttchFile(file);
					bpfv.setBpId(bpId);
					
					long fileSize = file.getSize();
					bpfv.setBpFileSize(convertFileSize(fileSize));
					
					bpFileVoList.add(bpfv);
				}
			}
		}
		return bpFileVoList;
	}
	
	public String convertFileSize(long size) {
	    // KB 단위로 변환
	    double kbSize = (double) size / 1024;
	    if (kbSize < 1024) {
	        return String.format("%.2f KB", kbSize);
	    }

	    // MB 단위로 변환
	    double mbSize = kbSize / 1024;
	    return String.format("%.2f MB", mbSize);
	}
	
	public String getBpRegDtStr(){
		if(bpRegDt!=null)
		return bpRegDt.format(DateTimeFormatter.ISO_DATE);

		return null;
	}
	
	
	public String getBpModDtStr(){
		if(bpModDt!=null)
		return bpModDt.format(DateTimeFormatter.ISO_DATE);

		return null;
	}
	
	public String getBpDelDtStr(){
		if(bpDelDt!=null)
		return bpDelDt.format(DateTimeFormatter.ISO_DATE);
		
		return null;
	}
	
	public String getBpShrYn() {
		if(StringUtils.isNotBlank(bpShrYn)) {
			return bpShrYn.trim();
		}else {
			return bpShrYn;
		}
	}
	

}
