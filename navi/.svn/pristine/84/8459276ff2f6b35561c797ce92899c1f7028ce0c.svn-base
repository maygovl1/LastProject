package kr.or.navi.project.controller;

import java.util.List;
import java.util.Map;

import javax.inject.Inject;
import javax.validation.groups.Default;

import org.apache.commons.lang3.StringUtils;
import org.apache.ibatis.annotations.Param;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.Errors;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.navi.common.paging.BootstrapFormBasePaginationRenderer;
import kr.or.navi.common.paging.PaginationInfo;
import kr.or.navi.common.paging.PaginationRenderer;
import kr.or.navi.project.service.ProjectService;
import kr.or.navi.projectdetail.gantt.service.GanttServiceImpl;
import kr.or.navi.projectdetail.gantt.vo.GanttEventVO;
import kr.or.navi.security.RealUser;
import kr.or.navi.vo.EmpVO;
import kr.or.navi.vo.IssueVO;
import kr.or.navi.vo.ProjectVO;
import lombok.extern.slf4j.Slf4j;
@Slf4j
@Controller
@RequestMapping("/project")
public class ProjectController {
	
//	public static class TestUtils{
//		public static boolean authorize(Authentication authentcation, String projId) {
//			return true;
//		}
//	}
	
	@Inject
	public ProjectService projectService;
	@GetMapping
//	@PreAuthorize("T(kr.or.navi.project.controller.ProjectController.TestUtils).authorize(authentication, projId)")
	public String list(
			@RequestParam(value = "ing",required = false, defaultValue = "ing") String ing
			,@RequestParam Map<String, Object> detailCondition
			, @RequestParam(name="page", required = false, defaultValue = "1") int currentPage
			,@RealUser EmpVO emp
			,Model model) {
//		if (ing.equals("end")) { // 마감된
//			detailCondition.put("ing", "");
//			ing = "end";
//
//		} else {
//			detailCondition.put("ing", "ing");
//		}
		model.addAttribute("realUser", emp);
		log.info("detailCondition : {}",detailCondition);
		PaginationInfo paging = new PaginationInfo(10,10);
		paging.setCurrentPage(currentPage);
		paging.setDetailCondition(detailCondition);
		List<ProjectVO> projectList = projectService.projectList(paging);
		model.addAttribute("projectList", projectList);
		PaginationRenderer renderer = new BootstrapFormBasePaginationRenderer("#searchForm");
		String pagingHTML = renderer.renderPagination(paging);
		model.addAttribute("pagingHTML",pagingHTML);
		model.addAttribute("paging",paging);
		return "project/projectList";
	}
	@GetMapping("/register.do")
	public String projectRegsterPage(@ModelAttribute("registerProject") ProjectVO registerProject, Errors error, Model model,@RealUser EmpVO realUser) {
		List<EmpVO> empList = projectService.selectEmpList();
		model.addAttribute("realUser",realUser);
		model.addAttribute("empList",empList);
		model.addAttribute("title","프로젝트 등록");
		return "project/projectRegister";
	}
	@PostMapping("emp/list")
	@ResponseBody
	public List<EmpVO> getEmpList(){
		return projectService.selectEmpList();
	}
	@PostMapping("/register.do")
	public String projectRegster(@Validated(Default.class) @ModelAttribute("registerProject") ProjectVO registerProject, Errors error,@RequestParam("empIds") String empIds,@RequestParam("roleIds") String roleIds,@RealUser EmpVO realUser,Model model ,RedirectAttributes redirectAttributes) {
		log.info("empIds : {}",empIds);
		log.info("registerProject : {}",registerProject);
		model.addAttribute("realUser",realUser);
		if(!error.hasErrors()&& StringUtils.isNotBlank(empIds)&&StringUtils.isNotBlank(roleIds)) {
			int cnt = projectService.createProject(registerProject,empIds,roleIds,realUser);
			if(cnt>0) {
				return "redirect:/project";
			}else {
				return "project/projectRegister";
			}
		}else {
			if(StringUtils.isNotBlank(empIds)&&StringUtils.isNotBlank(roleIds)) {
				redirectAttributes.addFlashAttribute("msg", "팀원을 선택해 주세요");
			}
			redirectAttributes.addFlashAttribute("title","프로젝트 등록");
			return "project/projectRegister";
		}
	}
	
	@PutMapping
	public String projectModifyController(@RequestBody ProjectVO modifyProject, Errors error, Model model) {
		log.info("modifyProject : {}",modifyProject);
		log.info("error : {}",error);
		int cnt = projectService.modifyProject(modifyProject);
		if(cnt>0) {
			model.addAttribute("msg","ok");	
		}else {
			model.addAttribute("msg","fail");
		}
		return "jsonView";
	}
	@DeleteMapping
	public String projectDeleteController(@RequestBody ProjectVO deleteProject, Errors error, Model model) {
		log.info("modifyProject : {}",deleteProject);
		log.info("error : {}",error);
		int cnt = projectService.projectDelete(deleteProject);
		if(cnt>0) {
			model.addAttribute("msg","ok");	
		}else {
			model.addAttribute("msg","fail");
		}
		return "jsonView";
	}
	
	@PostMapping("end/{proId}")
	@ResponseBody
	public String projectEndController(@PathVariable String proId) {
		int cnt = projectService.endProject(proId);
		if(cnt>0) {
			return "ok";
		}else {
			return "fail";
		}
	}
}
