package kr.or.navi.admin.qna.controller;

import java.util.List;

import javax.inject.Inject;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import kr.or.navi.board.qna.service.QnaService;
import kr.or.navi.common.paging.BootstrapFormBasePaginationRenderer;
import kr.or.navi.common.paging.PaginationInfo;
import kr.or.navi.common.paging.PaginationRenderer;
import kr.or.navi.common.paging.SearchCondition;
import kr.or.navi.security.RealUser;
import kr.or.navi.vo.BoardPostVO;
import kr.or.navi.vo.BookmarkBoardVO;
import kr.or.navi.vo.EmpVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/admin")
public class AdminQnaController {
	@Inject
	private QnaService service;
	

	@GetMapping("qna")
	public String qnaPage(
			@RealUser EmpVO realUser
			,@RequestParam(name="page", required = false, defaultValue = "1") int currentPage
			, Model model
			, @ModelAttribute("simpleCondition") SearchCondition simpleCondition
			) {
		String empId = realUser.getEmpId();
		PaginationInfo paging = new PaginationInfo(6,5);
		paging.setSimpleCondition(simpleCondition);
		paging.setCurrentPage(currentPage);
		List<BoardPostVO> qnaList = service.retrieveQnaList(paging);
		model.addAttribute("qnaList", qnaList);
		PaginationRenderer renderer = new BootstrapFormBasePaginationRenderer("#searchForm");
		String pagingHTML = renderer.renderPagination(paging);
		model.addAttribute("pagingHTML", pagingHTML);
		model.addAttribute("paging", paging);
		return "admin/qnaboard/adminQnaList";
	}

	@GetMapping("qna/answer/{bpId}")
	public String qnaAnswerPage(@PathVariable String bpId,Model model) {
		BoardPostVO qna = service.retrieveQna(bpId);
		model.addAttribute("qna", qna);
		return "admin/qnaboard/adminQnaAnswer";
	}
	
	@PutMapping("qna/answer/{bpId}")
	public String qnaAnswerController(@RequestBody BoardPostVO updateAnswerQna, @PathVariable String bpId,Model model) {
		log.info("updateAnswerQna : {}",updateAnswerQna);
		if(StringUtils.isNotBlank(updateAnswerQna.getBpQnaAs())) {
			updateAnswerQna.setBpId(bpId);
		int cnt = service.modifyAnswerQna(updateAnswerQna);
			if(cnt>0) {
				model.addAttribute("msg", "ok");
			}else {
				model.addAttribute("msg", "fail");
			}
		}else {
			model.addAttribute("msg", "empty");
		}
		return "jsonView";
	}
	
	

	@GetMapping("qna/faq")
	public String qnaOftenPage(Model model) {
		return "admin/qnaboard/adminQnaOftenList";
	}

	@GetMapping("qna/faq/add")
	public String qnaOftenAddPage(Model model) {
		return "admin/qnaboard/adminQnaOftenAdd";
	}

}
