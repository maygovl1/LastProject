function getCsrfToken(){
	return document.querySelector('meta[name="_csrf"]').getAttribute('content');
	}
function getCsrfHeader(){
	return document.querySelector('meta[name="_csrf_header"]').getAttribute('content');
}

$("a[data-pg-role='pageLink']").on("click", function(event) {
    event.preventDefault();
    let page = $(this).data("pgPage");
    let targetFormSelector = $(this).data("pgTarget");
    let $targetForm = $(targetFormSelector);
    $targetForm.find('input[name="page"]').val(page);
    $targetForm.submit();
    return false;
});


//체크박스 전체, 개별클릭 
function checkbox(checkall,tableClass) {
    let checkAll = $(checkall);
    let checkboxes = $(tableClass).find("input[type='checkbox']"); //테이블내부의 체크박스 
    let checked = checkboxes.prop("checked");
    checkAll.attr("title", "");
    checkboxes.attr("title", "");
    
    console.log("checkAll",checkAll);
    //여기서 체크박스가 다 선택된 경우 체크해제 해줘야함

	//체크가 되어있지 않을 경우! 실행하게 
    checkAll.on("click", function() {
        let checked = $(this).prop("checked");
        $(this).attr("title", checked ? "체크" : "체크해제");
        
        checkboxes.on(function() { // 전체에 대한 선택 동시 변경
            checkboxes.prop("checked", checked);
            checkboxes.attr("title", checked ? "체크" : "체크해제");
        });
    });

    checkboxes.each(function() {
        $(this).on("click", function() {
            let checked = $(this).prop("checked");
            $(this).attr("title", checked ? "체크" : "체크해제");
        });
    });

    return checkboxes;
}

function checkReset(checkTable){
	//해당 모달의 체크박스 전부 해제하기 
	let ckgroup = $(checkTable).find("input[type='checkbox']");
	console.log("ckgroup",ckgroup);
	//모달 닫히면 내부의 체크박스 초기화하기
	ckgroup.each(function() {
	    $(this).prop("checked", false);
	});
	
}

//클릭된 체크박스를 전송 폼에 추가하는 메소드
function addCheckInput(data, checkboxForm) { // data는 테이블 내부의 체크박스들

    data.each(function(idx) {

        // 조회된 체크박스가 체크될 때마다 동적으로 submit할 input 박스 추가
        $(this).on("change", function() {
            // 체크박스의 상태가 변경될 때마다 실행되는 코드
            let isChecked = $(this).prop("checked");
            let value = $(this).attr("name");

            if ($(this).hasClass("checkAll")) { // checkAll 클릭 시
                // checkAll 했을 경우 전체 인풋 찾아서 checkboxForm에 넣기
                data.filter(".checkbox").prop("checked", isChecked);
                data.filter(".checkbox").each(function() {
                    let checkboxValue = $(this).attr("name");
                    if (isChecked) {
                        // 체크된 경우에는 해당 체크박스의 입력란을 추가합니다.
                        checkboxForm.innerHTML += `<input type="text" name="${checkboxValue}" value="${checkboxValue}">`;
                    } else {
                        // 체크가 해제된 경우 해당 체크박스의 입력란을 삭제합니다.
                        $(`input[type='text'][name='${checkboxValue}']`).remove();
                    }
                });
            }

            if ($(this).hasClass("checkbox")) {
                // 나머지 체크박스의 경우 개별적으로 처리합니다.
                if (isChecked) {
                    // 체크된 경우에는 해당 체크박스의 입력란을 추가합니다.
                    checkboxForm.innerHTML += `<input type="text" name="${value}" value="${value}">`;
                } else {
                    // 체크가 해제된 경우 해당 체크박스의 입력란을 삭제합니다.
                    $(`input[type='text'][name='${value}']`).remove();
                }
            }

        });
    });
}




//체크박스 함수실행
let checkboxForm = document.querySelector('#checkboxForm');
let checkboxForm2 = document.querySelector('#checkboxForm2');
let cPath = document.body.dataset.contextPath;
const todoListModal = document.getElementById('todoListModal');


$(":input[data-pg-init-value]").each(function(index, input) {
    let $input = $(input);
    let initValue = $input.data("pgInitValue");
    $input.val(initValue);
});

/* 검색버튼 누른후에 작동함 체크박스 작동할 위치*/


//모달이 있으면 열릴때
if (todoListModal) {
	todoListModal.addEventListener('show.bs.modal', event => {
	
		let ckbox = checkbox('.tdList-Modal_table .checkAll','.tdList-Modal_table');
		console.log("ckbox",ckbox);
		//모달 체크박스작동
		
		
		/*비동기*/
		//검색클릭 시 비동기 요청 부분 
		$("[data-pg-role='searchUI']").on('click', '[data-pg-role="searchBtn"]', function() {
			
			let $searchUI = $(this).parents("[data-pg-role='searchUI']");
			let targetFormSelector = $searchUI.data("pgTarget");
			let $targetForm = $(targetFormSelector);
			let formData = new FormData();
			$searchUI.find(":input[name]").each(function(index, input) {
				let name = input.name;
				let value = $(input).val();
				$targetForm.find(`input[name=${name}]`).val(value);
				formData.append(name, value);  //formData에 form의 데이터를 Map형식으로 넣어주기
			});
			
			
			let sendData = [];
		
			for (let [key, value] of formData) {
			    console.log(key + " : " + value);
			    let data = {};
			    data[key] = value;
			    sendData.push(data);
			}
			
			
				
			let queryString = new URLSearchParams(formData); // 파라미터를 쿼리스트링으로 변환
		    let url =`${cPath}/todaylist/todayModal`;
		    let method = $targetForm.attr("method");
		
		    console.log(url);
		    console.log(method);
			
			
			//비동기처리해야함 
			
		    fetch(url, {
		       method: method,
				headers:{
						//"Accept":"application/json", //클라이언트가 서버로 보내는 요청 타입 
						"Content-Type":"application/json", // 서버가 클라이언트에게 보내는 요청 타입
						[getCsrfHeader()]: getCsrfToken()
					},
					body: JSON.stringify({//js객체를 json 문자열로 변환하는 함수
					        ts: sendData[0]["ts"],
					        tps: sendData[1]["tps"],
					        word: sendData[2]["word"]
					  })
				
		    }).then(resp => {
		        if (resp.ok) {
		            console.log("성공", resp);
		           	return resp.json();
		        } else {
		            throw new Error(`상태코드 ${resp.status} 수신`, {cause: resp});
		        }
		    }).then(JsonObj => {
			
				//비동기로 서버에서 넘어온 데이터 넣을 곳
				let asynBody = document.querySelector('#asynBody');
				//let checkboxForm = document.querySelector('#checkboxForm');        
		
		
				console.log("JsonObj",JsonObj);
				//자바에서 json으로 반환된 배열객체의 개수
				objLength = Object.keys(JsonObj).length
				console.log("반환데이터 개수",objLength)
				//체크박스 체크시 전체 해재 함수 넣기
				checkReset(todoListModal);
				//체크박스 폼 비워주기
				checkboxForm.innerHTML='';
				//테이블 한번 비워 주기
				asynBody.innerHTML='';
				
				if(objLength==0){
					asynBody.innerHTML = `
						<tr>
			             	<td colspan="9">해당조건의 일감이 없습니다.</td>
						</tr>
					`
				
				}
				
				
				for (let i = 0; i < objLength;i++){
					
					console.log(JsonObj[i])
					let tsNameCon =""
					if(JsonObj[i].tsId == 'T00001'){
						tsNameCon = `<span class="category new">${JsonObj[i].taskStatus.tsName}</span>`
					}
					
					if(JsonObj[i].tsId == 'T00002'){
						tsNameCon = `<span class="category emergency">${JsonObj[i].taskStatus.tsName}</span>`
					}
					
					if(JsonObj[i].tsId == 'T00003'){
						tsNameCon = `<span class="category ordinary">${JsonObj[i].taskStatus.tsName}</span>`
					}
				
					asynBody.innerHTML += `
						<tr>
							<th><input type="checkbox" class="checkbox" title="" name ="${JsonObj[i].taskId}" id="${JsonObj[i].taskId}"></th>
							<td>${JsonObj[i].rnum}</td>
							<td>${JsonObj[i].taskId}</td>
							<td>
								${tsNameCon}
							</td>
							<td class="text-start">
								 <a href="${cPath}/project/task/${JsonObj[i].proId}/${JsonObj[i].taskId}" title="[${JsonObj[i].proId}]${JsonObj[i].taskTitle} 상세페이지로 이동">
									  <em class="text-elipsis">
						                 <span class="fw-bold">[${JsonObj[i].proId}]</span>						       
										${JsonObj[i].taskTitle}
									</em>
								  </a>
							</td>
							<td>${JsonObj[i].empName}</td>
							<td>${JsonObj[i].taskProcessStatus.tpsName}</td>
							<td>${JsonObj[i].taskProcessStatus.tpsIng}</td>
							<td>${JsonObj[i].taskRegDtStr}</td>
						</tr>
					`;
				}
				//for end
				
				// checkbox('.tdList-Modal_table .checkAll','.tdList-Modal_table');
				//console.log("ckbox",ckbox);
				
			
		    }).catch(err => {
		        console.error(err);
		    });
		    
		
		});

		
		addCheckInput(ckbox, checkboxForm);
		
		/*비동기*/
		
  })
}





/*// 데이터를 로컬 스토리지에 저장하는 함수
function saveDataToLocalstorage(data) {
    localStorage.setItem('todolistData', JSON.stringify(data));
}

// 로컬 스토리지에서 데이터를 불러오는 함수
function getDataFromLocalstorage() {
    return JSON.parse(localStorage.getItem('todolistData')) || [];
}

// 페이지 로드 시 실행되는 함수
window.onload = function() {
    // 로컬 스토리지에서 데이터 불러오기
    let storedData = getDataFromLocalstorage();

    // 불러온 데이터를 사용하여 화면 구성하기
    renderData(storedData);
};
*/
// 데이터를 받아온 후 화면을 구성하는 함수
function renderData(data) {
	
	console.log(data);
	
    let todaylistCon = document.querySelector("#todaylistTable tbody");
    todaylistCon.innerHTML = ''; // 기존 데이터 초기화
	
    if (data.length === 0) {
        todaylistCon.innerHTML = `
            <tr>
                <td colspan="9">오늘의 일정을 등록해주세요.</td>
            </tr>
        `;
        return; // 데이터가 없는 경우 함수 종료
    }
	
    // 데이터를 사용하여 화면 구성
    data.forEach(function(item, index) {
        let tsNameCon = '';
        if (item.tsId === 'T00001') {
            tsNameCon = `<span class="category new">${item.taskStatus.tsName}</span>`;
        } else if (item.tsId === 'T00002') {
            tsNameCon = `<span class="category emergency">${item.taskStatus.tsName}</span>`;
        } else if (item.tsId === 'T00003') {
            tsNameCon = `<span class="category ordinary">${item.taskStatus.tsName}</span>`;
        }

        todaylistCon.innerHTML += `
            <tr>
                <th><input type="checkbox" class="checkbox" title="" name ="${item.taskId}" id="${item.taskId}"></th>
                <td>${index + 1}</td>
                <td>${item.taskId}</td>
                <td>${tsNameCon}</td>
                <td class="text-start">
                    <a href="${cPath}/project/task/${item.proId}/${item.taskId}" title="[${item.proId}]${item.taskTitle} 상세페이지로 이동">
                        <em class="text-elipsis">
                            <span class="fw-bold">[${item.proId}]</span>
                            ${item.taskTitle}
                        </em>
                    </a>
                </td>
                <td>${item.taskCompDtStr}</td>
                <td><input type="text" class="form-control min-auto" placeholder="예상시간" name="taskEstTime" value="${item.taskEstTime ? item.taskEstTime : '' }"></td>
                <td><input type="text" class="form-control min-auto" placeholder="소요시간" name="taskRqDt" value="${item.taskRqDt ? item.taskRqDt : ''}"></td>
                <td>
			
					<select class="me-1 form-select" name="tps" data-pg-init-value="">
						<option value="">진행률</option>
						<option value="T00001">10%</option>
						<option value="T00002">30%</option>
						<option value="T00003">50%</option>
						<option value="T00004">70%</option>
						<option value="T00005">90%</option>
						<option value="T00006">99%</option>
						<option value="T00007">100%</option>
	             	</select>
					
				</td>
            </tr>
        `;
    });

	

}






//추가버튼 클릭시 체크된 데이터를 post 오늘의 일정 insert 데이터 컨트롤러로 보내기
//checkboxForm에서 만들어진 일감의 아이디값을 '추가버튼 클릭시 비동기  요청 보내기 ?'
let addTdBtn = $("#addTaskBtn");
let todaylistTable = document.querySelector('#todaylistTable');
addTdBtn.on("click", function () {
	//여기서 모달의 checkBox 닫기
	$("#todoListModal").modal("hide")
	checkReset(todoListModal);
	console.log("모달 닫힘 , checkReset",checkReset(todoListModal));
	
	
    let checkedInput = $(checkboxForm).find("input[type='text']");
    let sendData2 = [];
    checkedInput.each(function () {
        let name = "taskId";
        let value = $(this).val();
        sendData2.push({ [name]: value }); // 필요한 경우 sendData에 데이터를 추가할 수 있습니다.
    });



        // 서버에 해당 데이터가 이미 존재하는지 확인
        fetch(`${cPath}/todaylist/addList`, { // 서버에 해당 데이터가 이미 존재하는지 확인하는 엔드포인트로 변경 필요
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                [getCsrfHeader()]: getCsrfToken()
            },
            body: JSON.stringify({ sendData2 })
        }).then(resp => {
            if (resp.ok) {
                return resp.json();
            } else {
                throw new Error(`상태코드 ${resp.status} 수신`, { cause: resp });
            }
        }).then(JsonObj => {
	
				// 중복된 데이터 검증해서 제외하고 로드하기
                    // 비동기데이터 시작
                   
	
                    // 받아온 데이터를 로컬 스토리지에 저장
                    //saveDataToLocalstorage(JsonObj);

                    // 받아온 데이터를 사용하여 화면 구성
                    renderData(JsonObj);
					console.log('폼 초기화 시작')
					//모달 form 체크 해제
					checkReset(todoListModal);
					// 모달 전송폼 초기화
					checkboxForm.innerHTML='';
					console.log('폼 초기화 완료')
			   //비동기 실행 후 한번 더 실행 해줘야 스크립트 동작
					let ckbox2 = checkbox('#todaylistTable .checkAll ','#todaylistTable');
					console.log("ckbox2",ckbox2);
				
					//체크박스 실행
                    addCheckInput(ckbox2, checkboxForm2);
					
                    //비동기데이터 끝	
	
	
        }).catch(err => {
                    console.error(err);
        });  
		
    //

});

		
let comBtn = $("#completeBtn");
comBtn.on("click", function (){
		console.log("완료버튼 클릭");
	
		
		
		//배열에 담을 객체의 요소는 : 일감ID, 예상시간, 작업상태 
		//일감아이디 객체 안에 예상시간,작업상태 값을 담아준다. 
		let updateData=[] // 소요값이 변경되거나, 예상시간이 변경되거나, 작업상태가 변경되거나
	
		let url = `${cPath}/todaylist/update`;
		
		// fetch 요청 보내기 
		fetch(url, {
		    method: "POST",
		    headers: {
		        "Accept": "application/json", // Json으로 요청
		        "Content-Type": "application/json",// 받아오는 데이터 타입-> todayList 테이블에서 조회오기
				[getCsrfHeader()]: getCsrfToken() 
		    },
		    body: JSON.stringify(updateData) // 비동기 요청시 서버로 보내는 데이터, 문자열 타입으로 변형해야함
		
		}).then(resp => {
		
		    if (resp.ok) {
		        console.log("성공", resp); // 서버가 반환해주는  Json type의 데이터들
		        return resp.json();
		    } else {
		        throw new Error(`상태코드 ${resp.status} 수신`, { cause: resp });
		    }
		
		}).then(JsonObj=>{
			
			console.log("JsonObj",JsonObj);
			
		}).catch(err => {
		
		    console.error("에러다", err);
		
		});
		
		console.log("일감상태가 업데이트 되었다.");
		// 2. checkboxForm2 비워주기
			checkboxForm2.innerHTML='';

//end			
});



		
let delBtn = $("#delBtn");
delBtn.on("click", function (){
	//테이블 데이터 비동기요청으로 보내야함 
	//  1. 체크된 테이블 목록 지우기
	let checkList = $(todaylistTable).find("input[type='checkbox']");
	let tr = checkList.filter(":checked").parents("tr")
		console.log(checkList.filter(":checked"),tr);
	let delData=[];
	
	//삭제된 나머지 목록 배열에 담아서 바디에 담아서 서버로 보내기
	checkList.each(function(){
	    let isChecked = $(this).is(":checked");
	    if(isChecked){
 			delData.push({"taskId":$(this).attr("name")}); // 삭제전 살제할 데이터 네임값 먼저 추가하기
	        $(this).closest("tr").remove();//삭제하기
			
	    } 

	});
	
	console.log("delData",delData);
	
		let url = `${cPath}/todaylist/delete`;
		console.log("url", url);
		// fetch 요청 보내기 
		fetch(url, {
		    method: "POST",
		    headers: {
		        "Accept": "application/json", // Json으로 요청
		        "Content-Type": "application/json",// 받아오는 데이터 타입-> todayList 테이블에서 조회오기
				[getCsrfHeader()]: getCsrfToken() 
		    },
		    body: JSON.stringify(delData) // 비동기 요청시 서버로 보내는 데이터, 문자열 타입으로 변형해야함
		
		}).then(resp => {
		
		    if (resp.ok) {
		        console.log("성공", resp); // 서버가 반환해주는  Json type의 데이터들
		        return resp.json();
		    } else {
		        throw new Error(`상태코드 ${resp.status} 수신`, { cause: resp });
		    }
		
		}).catch(err => {
		
		    console.error("에러다", err);
		
		});
		
		console.log("일감이 삭제되었습니다.");
		console.log("delData",delData);
			
		// 2. checkboxForm2 비워주기
			checkboxForm2.innerHTML='';

//end			
});


