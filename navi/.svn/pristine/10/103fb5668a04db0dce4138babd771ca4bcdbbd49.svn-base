package kr.or.navi.todaylist.controller;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.navi.advice.task.TaskControllerAdvice;
import kr.or.navi.common.paging.BootstrapFormBasePaginationRenderer;
import kr.or.navi.common.paging.PaginationInfo;
import kr.or.navi.common.paging.PaginationRenderer;
import kr.or.navi.security.RealUser;
import kr.or.navi.todaylist.dao.TodayListDAO;
import kr.or.navi.todaylist.service.TodayListService;
import kr.or.navi.vo.EmpVO;
import kr.or.navi.vo.TaskProcessStatusVO;
import kr.or.navi.vo.TaskStatusVO;
import kr.or.navi.vo.TaskVO;
import kr.or.navi.vo.TodayListVO;
import lombok.extern.slf4j.Slf4j;


@Slf4j
@RequestMapping("/todaylist")
@Controller
public class TodaylistController {

	@Inject
	TodayListService todaylistService;
	@Inject
	TaskControllerAdvice taskCommonService;
	
	
	@GetMapping
	public String todaylistModal(
			@RequestParam(name="page", required = false, defaultValue = "1") int currentPage
			,@RequestParam Map<String, Object> detailCondition
			,@RealUser EmpVO realUser		
			,Model model) {
	
				PaginationInfo paging = new PaginationInfo(10,10); // 스크린 사이즈와, 블럭 사이즈
				
				 // 검색 searchForm에서 부터 넘어오는 파라미터값 
				paging.setCurrentPage(currentPage); 
				paging.setDetailCondition(detailCondition);
			    
				String taskManId = realUser.getEmpId();
				List<TodayListVO> taskList =todaylistService.selectTaskList(paging, taskManId);
				List<TaskStatusVO> taskstatusList = taskCommonService.addProjectStateList();
				List<TaskProcessStatusVO> tpsStatusList =taskCommonService.addProcessStatusVO();
				
				
				model.addAttribute("taskList",taskList); 
				model.addAttribute("taskstatusList",taskstatusList);
				model.addAttribute("tpsStatusList",tpsStatusList);
				
				
				//4.페이지네이션 그려주기
				PaginationRenderer renderer = new BootstrapFormBasePaginationRenderer("#searchForm");
				//5.페이지네이션 html String값으로 넘겨주기
				String pagingHTML = renderer.renderPagination(paging);
				//6.모델에 담아서 뷰로 보내기
				model.addAttribute("pagingHTML",pagingHTML);
				model.addAttribute("paging",paging);
			
		
		return "todaylist/tdList";
	}
	
	 //비동기 요청 할 떄에도 서버에서 메소드를 받아줄 컨트롤러 필요
	//Spring MVC에서 @ResponseBody를 사용하면 해당 메서드가 직접 데이터를 반환하고, Spring은 이 데이터를 HTTP 응답 본문에 직렬화하여 클라이언트에게 보냄
	//Post요청으로 받아온 데이터는 파라미터로 받아줘야함
	@PostMapping("todayModal")
	@ResponseBody
	public List<TodayListVO> test(
	        @RequestParam(name = "page", required = false, defaultValue = "1") int currentPage,
	        @RequestParam Map<String, Object> detailCondition,
	        @RealUser EmpVO realUser,
	        @RequestBody Map<String, Object> requestBody, // 요청 본문을 자바 객체로 받음
	        Model model) {
		
		 
		 
			
				String ts = (String) requestBody.get("ts");
				String tps = (String) requestBody.get("tps");
				String word = (String) requestBody.get("word");
				detailCondition.put("ts", ts);
				detailCondition.put("tps", tps);
				detailCondition.put("word", word);
			
	    //detailCondition에 검색조건을 넣어주기
	   
	    String taskManId = realUser.getEmpId();
	    detailCondition.put("taskManId", taskManId);
	   

	    PaginationInfo paging = new PaginationInfo(10, 10);
	    paging.setCurrentPage(currentPage);
	    paging.setDetailCondition(detailCondition);
	   
	  

	    List<TodayListVO> taskList = todaylistService.selectTaskList(paging, taskManId);
		
	 
	    PaginationRenderer renderer = new BootstrapFormBasePaginationRenderer("#searchForm");
	    String pagingHTML = renderer.renderPagination(paging);
	

	    return taskList;
	}

	
	
	/*
	 * requestBoby 원본 데이터 [{sendData2=[{taskId=T00030}, {taskId=T00032} ....  }]
	 * checkedInput 원본데이 {sendData2=[{taskId=T00030}, {taskId=T00032}]}
	 * taskIdList 원본데이터 [{taskId=T00030}, {taskId=T00032}]
	 * */
	
	@PostMapping
	@ResponseBody
	public List<TodayListVO> test2(@RealUser EmpVO realUser,
	                               @RequestBody Map<String, Object> requestBody,
	                               Model model) {
	    
	    // checkedInput에서 taskId 배열 추출
	    List<Map<String, Object>> taskIdList = (List<Map<String, Object>>) requestBody.get("sendData2");
	    log.info("taskIdList:{}", taskIdList);
	    
	    // taskIdList의 value를 전부 배열에 담기
	    List<String> taskIdValues = taskIdList.stream()
	            .map(map -> map.get("taskId").toString())
	            .collect(Collectors.toList());
	    
	    // 모든 조회 결과를 담을 리스트 생성
	    List<TodayListVO> allTodayList = new ArrayList<>();
	    
	    for (String taskId : taskIdValues) {
	       
	        // 각 taskId에 대한 조회 수행
	        List<TodayListVO> todayList = todaylistService.selectTodayList(taskId);
	     
	        
	        // 조회 결과를 전체 리스트에 추가
	        allTodayList.addAll(todayList);
	    }
	  
	    return allTodayList; 
	}
	
	
}
