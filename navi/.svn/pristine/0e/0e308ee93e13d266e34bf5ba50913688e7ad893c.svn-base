package kr.or.navi.board.share.service;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.UUID;

import javax.annotation.PostConstruct;
import javax.inject.Inject;

import org.apache.commons.io.FileUtils;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.Resource;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import kr.or.navi.board.share.dao.ShareDAO;
import kr.or.navi.common.paging.PaginationInfo;
import kr.or.navi.vo.BoardPostFileVO;
import kr.or.navi.vo.BoardPostVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class ShareServiceImpl implements ShareService{

		@Inject
		private ShareDAO dao;

		@PostConstruct
		public void init() {
			log.info("saveFolder:{}",saveFolder);
		}
		
		@Override
		public List<BoardPostVO> retrieveShareList(PaginationInfo paging) {
			int totalRecord = dao.totalRecord(paging);
			paging.setTotalRecord(totalRecord);
			return dao.selectShareList(paging);
		}

		@Override
		public BoardPostVO retrieveShare(String bpId) {
			return dao.selectShare(bpId);
		}

		@Override
		public int modifyShare(BoardPostVO vo) {
			return dao.updateShare(vo);
		}

		@Override
		public int removeShare(String bpId) {
			return dao.deleteShare(bpId);
		}
		
		@Value("file:D:/saveFiles/")
		private Resource saveFolder;

		@Override
		public int createShare(BoardPostVO vo) throws IOException {
			log.info("==>>saveFolder:{}",saveFolder);
			int cnt = dao.insertShare(vo);
			List<BoardPostFileVO> bpFileVoList = vo.getBpFileVoList();
			for(BoardPostFileVO bpfVO : bpFileVoList) {
				MultipartFile bpAttchFile = bpfVO.getBpAttchFile();
				String uuid = saveToResource(bpAttchFile, saveFolder);
				bpfVO.setBpUuidName(uuid); 
				cnt+= dao.insertFile(bpfVO);
			}
			return cnt;
		}
		
		private String saveToResource(MultipartFile single, Resource saveFolder) throws IOException {
			String saveName = UUID.randomUUID().toString(); //겹치지 않는 걸로 만들어주기 위해 random으로 생성
			Resource saveFileRes = saveFolder.createRelative(saveName);
			File saveFile = saveFileRes.getFile(); //저장을 하기 위해선 File로 변환
			try(
					InputStream is = single.getInputStream();
					){
				FileUtils.copyInputStreamToFile(is, saveFile); //저장
			}
			return saveName;
		}
			
		@Override
		public List<BoardPostFileVO> retrieveShareFile(String bpId) {
			return dao.selectFile(bpId);
		}

		@Override
		public int viewCnt(String bpId) {
			return dao.updateCnt(bpId);
		}
}
